// Generated by Dagger (https://dagger.dev).
package com.example.androidsoa.di;

import android.app.Application;
import com.example.androidsoa.BaseApplication;
import com.example.androidsoa.Login.LoginView;
import com.example.androidsoa.Login.LoginView_MembersInjector;
import com.example.androidsoa.Principal.PrincipalView;
import com.example.androidsoa.Principal.PrincipalView_MembersInjector;
import com.example.androidsoa.Signup.SignupView;
import com.example.androidsoa.Signup.SignupView_MembersInjector;
import com.example.androidsoa.data.MyDatabase;
import com.example.androidsoa.network.PokemonService.PokemonApi;
import com.example.androidsoa.network.SOAService.SOAApi;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerIAppComponent {
  private DaggerIAppComponent() {
  }

  public static IAppComponent.Builder builder() {
    return new Builder();
  }

  private static final class Builder implements IAppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public IAppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new IAppComponentImpl(application);
    }
  }

  private static final class SignupViewSubcomponentFactory implements ActivityBuilderModule_ContributeSignupView.SignupViewSubcomponent.Factory {
    private final IAppComponentImpl iAppComponentImpl;

    private SignupViewSubcomponentFactory(IAppComponentImpl iAppComponentImpl) {
      this.iAppComponentImpl = iAppComponentImpl;
    }

    @Override
    public ActivityBuilderModule_ContributeSignupView.SignupViewSubcomponent create(
        SignupView arg0) {
      Preconditions.checkNotNull(arg0);
      return new SignupViewSubcomponentImpl(iAppComponentImpl, arg0);
    }
  }

  private static final class PrincipalViewSubcomponentFactory implements ActivityBuilderModule_ContributePrincipalView.PrincipalViewSubcomponent.Factory {
    private final IAppComponentImpl iAppComponentImpl;

    private PrincipalViewSubcomponentFactory(IAppComponentImpl iAppComponentImpl) {
      this.iAppComponentImpl = iAppComponentImpl;
    }

    @Override
    public ActivityBuilderModule_ContributePrincipalView.PrincipalViewSubcomponent create(
        PrincipalView arg0) {
      Preconditions.checkNotNull(arg0);
      return new PrincipalViewSubcomponentImpl(iAppComponentImpl, arg0);
    }
  }

  private static final class LoginViewSubcomponentFactory implements ActivityBuilderModule_ContributeLoginView.LoginViewSubcomponent.Factory {
    private final IAppComponentImpl iAppComponentImpl;

    private LoginViewSubcomponentFactory(IAppComponentImpl iAppComponentImpl) {
      this.iAppComponentImpl = iAppComponentImpl;
    }

    @Override
    public ActivityBuilderModule_ContributeLoginView.LoginViewSubcomponent create(LoginView arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginViewSubcomponentImpl(iAppComponentImpl, arg0);
    }
  }

  private static final class SignupViewSubcomponentImpl implements ActivityBuilderModule_ContributeSignupView.SignupViewSubcomponent {
    private final IAppComponentImpl iAppComponentImpl;

    private final SignupViewSubcomponentImpl signupViewSubcomponentImpl = this;

    private SignupViewSubcomponentImpl(IAppComponentImpl iAppComponentImpl, SignupView arg0Param) {
      this.iAppComponentImpl = iAppComponentImpl;


    }

    @Override
    public void inject(SignupView arg0) {
      injectSignupView(arg0);
    }

    private SignupView injectSignupView(SignupView instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, iAppComponentImpl.dispatchingAndroidInjectorOfObject());
      SignupView_MembersInjector.injectDatabase(instance, iAppComponentImpl.provideDatabaseInstanceProvider.get());
      SignupView_MembersInjector.injectSoaApi(instance, iAppComponentImpl.provideSoaServiceProvider.get());
      return instance;
    }
  }

  private static final class PrincipalViewSubcomponentImpl implements ActivityBuilderModule_ContributePrincipalView.PrincipalViewSubcomponent {
    private final IAppComponentImpl iAppComponentImpl;

    private final PrincipalViewSubcomponentImpl principalViewSubcomponentImpl = this;

    private PrincipalViewSubcomponentImpl(IAppComponentImpl iAppComponentImpl,
        PrincipalView arg0Param) {
      this.iAppComponentImpl = iAppComponentImpl;


    }

    @Override
    public void inject(PrincipalView arg0) {
      injectPrincipalView(arg0);
    }

    private PrincipalView injectPrincipalView(PrincipalView instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, iAppComponentImpl.dispatchingAndroidInjectorOfObject());
      PrincipalView_MembersInjector.injectPokemonApi(instance, iAppComponentImpl.providePokemonServiceProvider.get());
      return instance;
    }
  }

  private static final class LoginViewSubcomponentImpl implements ActivityBuilderModule_ContributeLoginView.LoginViewSubcomponent {
    private final IAppComponentImpl iAppComponentImpl;

    private final LoginViewSubcomponentImpl loginViewSubcomponentImpl = this;

    private LoginViewSubcomponentImpl(IAppComponentImpl iAppComponentImpl, LoginView arg0Param) {
      this.iAppComponentImpl = iAppComponentImpl;


    }

    @Override
    public void inject(LoginView arg0) {
      injectLoginView(arg0);
    }

    private LoginView injectLoginView(LoginView instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, iAppComponentImpl.dispatchingAndroidInjectorOfObject());
      LoginView_MembersInjector.injectSoaApi(instance, iAppComponentImpl.provideSoaServiceProvider.get());
      LoginView_MembersInjector.injectDatabase(instance, iAppComponentImpl.provideDatabaseInstanceProvider.get());
      return instance;
    }
  }

  private static final class IAppComponentImpl implements IAppComponent {
    private final IAppComponentImpl iAppComponentImpl = this;

    private Provider<ActivityBuilderModule_ContributeSignupView.SignupViewSubcomponent.Factory> signupViewSubcomponentFactoryProvider;

    private Provider<ActivityBuilderModule_ContributePrincipalView.PrincipalViewSubcomponent.Factory> principalViewSubcomponentFactoryProvider;

    private Provider<ActivityBuilderModule_ContributeLoginView.LoginViewSubcomponent.Factory> loginViewSubcomponentFactoryProvider;

    private Provider<Application> applicationProvider;

    private Provider<MyDatabase> provideDatabaseInstanceProvider;

    private Provider<Retrofit> provideRetrofitInstanceProvider;

    private Provider<SOAApi> provideSoaServiceProvider;

    private Provider<PokemonApi> providePokemonServiceProvider;

    private IAppComponentImpl(Application applicationParam) {

      initialize(applicationParam);

    }

    private Map<Class<?>, Provider<dagger.android.AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<dagger.android.AndroidInjector.Factory<?>>>newMapBuilder(3).put(SignupView.class, ((Provider) signupViewSubcomponentFactoryProvider)).put(PrincipalView.class, ((Provider) principalViewSubcomponentFactoryProvider)).put(LoginView.class, ((Provider) loginViewSubcomponentFactoryProvider)).build();
    }

    private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<dagger.android.AndroidInjector.Factory<?>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final Application applicationParam) {
      this.signupViewSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributeSignupView.SignupViewSubcomponent.Factory>() {
        @Override
        public ActivityBuilderModule_ContributeSignupView.SignupViewSubcomponent.Factory get() {
          return new SignupViewSubcomponentFactory(iAppComponentImpl);
        }
      };
      this.principalViewSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributePrincipalView.PrincipalViewSubcomponent.Factory>() {
        @Override
        public ActivityBuilderModule_ContributePrincipalView.PrincipalViewSubcomponent.Factory get(
            ) {
          return new PrincipalViewSubcomponentFactory(iAppComponentImpl);
        }
      };
      this.loginViewSubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributeLoginView.LoginViewSubcomponent.Factory>() {
        @Override
        public ActivityBuilderModule_ContributeLoginView.LoginViewSubcomponent.Factory get() {
          return new LoginViewSubcomponentFactory(iAppComponentImpl);
        }
      };
      this.applicationProvider = InstanceFactory.create(applicationParam);
      this.provideDatabaseInstanceProvider = DoubleCheck.provider(ApplicationModule_ProvideDatabaseInstanceFactory.create(applicationProvider));
      this.provideRetrofitInstanceProvider = DoubleCheck.provider(ApplicationModule_ProvideRetrofitInstanceFactory.create());
      this.provideSoaServiceProvider = DoubleCheck.provider(ApplicationModule_ProvideSoaServiceFactory.create(provideRetrofitInstanceProvider));
      this.providePokemonServiceProvider = DoubleCheck.provider(ApplicationModule_ProvidePokemonServiceFactory.create(provideRetrofitInstanceProvider));
    }

    @Override
    public void inject(BaseApplication arg0) {
      injectBaseApplication(arg0);
    }

    private BaseApplication injectBaseApplication(BaseApplication instance) {
      DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
      return instance;
    }
  }
}
