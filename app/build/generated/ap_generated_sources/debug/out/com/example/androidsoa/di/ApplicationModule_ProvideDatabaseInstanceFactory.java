// Generated by Dagger (https://dagger.dev).
package com.example.androidsoa.di;

import android.app.Application;
import com.example.androidsoa.data.MyDatabase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvideDatabaseInstanceFactory implements Factory<MyDatabase> {
  private final Provider<Application> applicationProvider;

  public ApplicationModule_ProvideDatabaseInstanceFactory(
      Provider<Application> applicationProvider) {
    this.applicationProvider = applicationProvider;
  }

  @Override
  public MyDatabase get() {
    return provideDatabaseInstance(applicationProvider.get());
  }

  public static ApplicationModule_ProvideDatabaseInstanceFactory create(
      Provider<Application> applicationProvider) {
    return new ApplicationModule_ProvideDatabaseInstanceFactory(applicationProvider);
  }

  public static MyDatabase provideDatabaseInstance(Application application) {
    return Preconditions.checkNotNullFromProvides(ApplicationModule.provideDatabaseInstance(application));
  }
}
